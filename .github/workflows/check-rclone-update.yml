name: Check Rclone Updates

on:
  schedule:
    # Run daily at 10:00 UTC (Âåó‰∫¨Êó∂Èó¥‰∏ãÂçà6ÁÇπ)
    - cron: '0 10 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  check-updates:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new Rclone release
        id: check_release
        run: |
          # Get current version from module.prop
          CURRENT_VERSION=$(grep -oP '^version=\Kv.*' magisk-rclone/module.prop)
          echo "Current version: $CURRENT_VERSION"
          
          # Get latest release from Rclone GitHub API with retry logic
          echo "Fetching latest Rclone release from GitHub API..."
          for i in {1..3}; do
            RELEASE_INFO=$(curl -s --fail --connect-timeout 30 --max-time 60 \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/rclone/rclone/releases/latest") && break
            echo "Attempt $i failed, retrying in 5 seconds..."
            sleep 5
          done
          
          if [ -z "$RELEASE_INFO" ] || echo "$RELEASE_INFO" | grep -q "API rate limit exceeded"; then
            echo "Failed to fetch release information from GitHub API"
            echo "update_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          LATEST_RELEASE=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          echo "Latest release: $LATEST_RELEASE"
          
          # Validate that we got a proper version tag
          if [ -z "$LATEST_RELEASE" ] || [ "$LATEST_RELEASE" = "null" ]; then
            echo "Failed to parse latest release version"
            echo "update_needed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Compare versions
          if [ "$CURRENT_VERSION" != "$LATEST_RELEASE" ]; then
            echo "New version available: $LATEST_RELEASE"
            echo "new_version=$LATEST_RELEASE" >> $GITHUB_OUTPUT
            echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "update_needed=true" >> $GITHUB_OUTPUT
            
            # Extract release info
            RELEASE_URL=$(echo "$RELEASE_INFO" | jq -r '.html_url')
            RELEASE_NOTES=$(echo "$RELEASE_INFO" | jq -r '.body')
            RELEASE_DATE=$(echo "$RELEASE_INFO" | jq -r '.published_at')
            
            echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
            echo "release_date=$RELEASE_DATE" >> $GITHUB_OUTPUT
            
            # Save release notes to file for later use (limit size)
            echo "$RELEASE_NOTES" | head -50 > /tmp/release_notes.txt
          else
            echo "No update needed - already at latest version"
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Update version in module.prop
        if: steps.check_release.outputs.update_needed == 'true'
        run: |
          NEW_VERSION="${{ steps.check_release.outputs.new_version }}"
          
          # Validate new version format
          if [[ ! "$NEW_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "Invalid version format: $NEW_VERSION"
            exit 1
          fi
          
          # Update version in module.prop
          sed -i "s/^version=.*/version=$NEW_VERSION/" magisk-rclone/module.prop
          
          # Increment versionCode
          CURRENT_VERSION_CODE=$(grep -oP '^versionCode=\K.*' magisk-rclone/module.prop)
          NEW_VERSION_CODE=$((CURRENT_VERSION_CODE + 1))
          sed -i "s/^versionCode=.*/versionCode=$NEW_VERSION_CODE/" magisk-rclone/module.prop
          
          echo "Updated version to $NEW_VERSION and versionCode to $NEW_VERSION_CODE"
          
          # Verify the changes
          echo "New module.prop content:"
          cat magisk-rclone/module.prop

      - name: Create Pull Request
        if: steps.check_release.outputs.update_needed == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "üöÄ Update Rclone to ${{ steps.check_release.outputs.new_version }}"
          title: "üöÄ Update Rclone from ${{ steps.check_release.outputs.current_version }} to ${{ steps.check_release.outputs.new_version }}"
          body: |
            ## üöÄ Rclone Version Update
            
            **Previous Version:** `${{ steps.check_release.outputs.current_version }}`  
            **New Version:** `${{ steps.check_release.outputs.new_version }}`  
            **Release Date:** ${{ steps.check_release.outputs.release_date }}
            
            ### üìù Changes Made
            - ‚úÖ Updated version in `magisk-rclone/module.prop`
            - ‚úÖ Incremented versionCode for Magisk module
            
            ### üîó Release Information
            **Release URL:** ${{ steps.check_release.outputs.release_url }}
            
            ### üìã Release Notes
            <details>
            <summary>Click to expand release notes</summary>
            
            ```
            $(cat /tmp/release_notes.txt)
            ```
            
            </details>
            
            ### ‚ö†Ô∏è Testing Required
            - [ ] Test basic rclone functionality
            - [ ] Verify mount operations work correctly
            - [ ] Check compatibility with current Android versions
            
            ---
            
            *This PR was automatically created by the Rclone update checker workflow.*  
            *Ëá™Âä®Ê£ÄÊü• Rclone Êõ¥Êñ∞Âπ∂ÂàõÂª∫ PR*
            
            **Manual Testing Recommended:** Please test the new version before merging.
          branch: update-rclone-${{ steps.check_release.outputs.new_version }}
          delete-branch: true
          labels: |
            enhancement
            rclone-update
            automated-pr

      - name: Summary
        if: steps.check_release.outputs.update_needed == 'true'
        run: |
          echo "‚úÖ Created PR to update Rclone from ${{ steps.check_release.outputs.current_version }} to ${{ steps.check_release.outputs.new_version }}"
        
      - name: No Update Needed
        if: steps.check_release.outputs.update_needed == 'false'
        run: |
          echo "‚ÑπÔ∏è Rclone is already up to date"
